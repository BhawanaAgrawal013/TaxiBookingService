// <auto-generated />
using System;
using DataAccessLayer;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccessLayer.Migrations
{
    [DbContext(typeof(TaxiBookingContext))]
    [Migration("20230405051129_addtables")]
    partial class addtables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccessLayer.Entity.Area", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CityId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("date");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(15)");

                    b.Property<string>("Pincode")
                        .HasColumnType("varchar(6)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Booking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingStatusId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DropOffTime")
                        .HasColumnType("datetime");

                    b.Property<string>("DropoffLocation")
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("date");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("PickupDate")
                        .HasColumnType("datetime");

                    b.Property<string>("PickupLocation")
                        .HasColumnType("varchar(50)");

                    b.Property<int?>("RatingId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BookingStatusId");

                    b.HasIndex("DriverId");

                    b.HasIndex("RatingId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("Bookings");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.BookingStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .HasColumnType("varchar(15)");

                    b.HasKey("Id");

                    b.ToTable("BookingStatuses");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.CancellationReason", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("date");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("varchar(20)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.ToTable("CancellationReasons");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.CancelledBooking", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BookingId")
                        .HasColumnType("int");

                    b.Property<int>("CancellationReasonid")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("date");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("Reason")
                        .HasColumnType("int");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("BookingId");

                    b.HasIndex("CancellationReasonid");

                    b.ToTable("CancelledBookings");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.City", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("date");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(15)");

                    b.Property<int>("StateId")
                        .HasColumnType("int");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("StateId");

                    b.ToTable("Cities");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Driver", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("DrivingLicense")
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("date");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<decimal>("Rating")
                        .HasColumnType("decimal");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.Property<bool>("isActive")
                        .HasColumnType("bit");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("UserId")
                        .IsUnique();

                    b.HasIndex("VehicleId")
                        .IsUnique();

                    b.ToTable("Drivers");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Location", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AreaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<decimal>("Lattitude")
                        .HasColumnType("decimal(18,0)");

                    b.Property<decimal>("Longitude")
                        .HasColumnType("decimal(18,0)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("date");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Street")
                        .HasColumnType("varchar(15)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("AreaId");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Payment", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("ModeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("date");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<int>("PaymentModeId")
                        .HasColumnType("int");

                    b.Property<int>("amount")
                        .HasColumnType("int");

                    b.Property<DateTime>("date")
                        .HasColumnType("date");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.HasKey("id");

                    b.HasIndex("PaymentModeId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.PaymentMode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Mode")
                        .IsRequired()
                        .HasColumnType("varchar(15)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("date");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("PaymentModes");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Rating", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("date");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("date");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("RoleName")
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("date");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(15)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("States");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("date");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("FirstName")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Gender")
                        .HasColumnType("varchar(6)");

                    b.Property<string>("LastName")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("date");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(8)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.VehicleDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<string>("Manufacturer")
                        .HasColumnType("varchar(20)");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("date");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("RegistrationName")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("RegistrationNumber")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("Seating")
                        .HasColumnType("int");

                    b.Property<string>("VehicleModel")
                        .HasColumnType("varchar(20)");

                    b.Property<int>("VehicleTypeId")
                        .HasColumnType("int");

                    b.Property<bool>("isApproved")
                        .HasColumnType("bit");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("VehicleTypeId");

                    b.ToTable("VehicleDetails");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.VehicleType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("date");

                    b.Property<int>("CreatedBy")
                        .HasColumnType("int");

                    b.Property<DateTime>("ModifiedAt")
                        .HasColumnType("date");

                    b.Property<int>("ModifiedBy")
                        .HasColumnType("int");

                    b.Property<string>("Type")
                        .HasColumnType("varchar(10)");

                    b.Property<bool>("isDelete")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("VehicleTypes");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Area", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.City", "City")
                        .WithMany("Areas")
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Booking", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.BookingStatus", "BookingStatus")
                        .WithMany("Bookings")
                        .HasForeignKey("BookingStatusId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.Driver", "Driver")
                        .WithMany("Bookings")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.Rating", "Rating")
                        .WithOne("Booking")
                        .HasForeignKey("DataAccessLayer.Entity.Booking", "RatingId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.User", "User")
                        .WithMany("Bookings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("BookingStatus");

                    b.Navigation("Driver");

                    b.Navigation("Rating");

                    b.Navigation("User");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.CancelledBooking", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.Booking", "Booking")
                        .WithMany()
                        .HasForeignKey("BookingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.CancellationReason", "CancellationReason")
                        .WithMany("CancelledBookings")
                        .HasForeignKey("CancellationReasonid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Booking");

                    b.Navigation("CancellationReason");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.City", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Driver", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.User", "User")
                        .WithOne("Driver")
                        .HasForeignKey("DataAccessLayer.Entity.Driver", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccessLayer.Entity.VehicleDetail", "VehicleDetail")
                        .WithOne("Driver")
                        .HasForeignKey("DataAccessLayer.Entity.Driver", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");

                    b.Navigation("VehicleDetail");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Location", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.Area", "Area")
                        .WithMany("Locations")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Area");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Payment", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.PaymentMode", "PaymentMode")
                        .WithMany("Payments")
                        .HasForeignKey("PaymentModeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PaymentMode");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Rating", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.Driver", "Driver")
                        .WithMany("Ratings")
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.User", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.VehicleDetail", b =>
                {
                    b.HasOne("DataAccessLayer.Entity.VehicleType", "VehicleType")
                        .WithMany("VehicleDetails")
                        .HasForeignKey("VehicleTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("VehicleType");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Area", b =>
                {
                    b.Navigation("Locations");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.BookingStatus", b =>
                {
                    b.Navigation("Bookings");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.CancellationReason", b =>
                {
                    b.Navigation("CancelledBookings");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.City", b =>
                {
                    b.Navigation("Areas");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Driver", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.PaymentMode", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Rating", b =>
                {
                    b.Navigation("Booking");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.State", b =>
                {
                    b.Navigation("Cities");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.User", b =>
                {
                    b.Navigation("Bookings");

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.VehicleDetail", b =>
                {
                    b.Navigation("Driver");
                });

            modelBuilder.Entity("DataAccessLayer.Entity.VehicleType", b =>
                {
                    b.Navigation("VehicleDetails");
                });
#pragma warning restore 612, 618
        }
    }
}
